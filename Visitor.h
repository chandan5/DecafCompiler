
class ASTProgram;
class ASTExpression;
class ASTDeclaration;
class ASTMethodDeclaration;
class ASTStatement;
class ASTAssignmentStatement;
class ASTBinaryExpression;
class ASTLocation;
class ASTVarLocation;
class ASTArrayLocation;
class ASTIntegerLiteralExpression;
class ASTBooleanLiteralExpression;
class ASTFieldDeclaration;
class ASTNormalIdentifier;
class ASTArrayIdentifier;
class ASTParam;
class ASTBlockStatement;
class ASTVarDeclaration;
class ASTBreakStatement;
class ASTContinueStatement;
class ASTIfStatement;
class ASTForStatement;
class ASTReturnStatement;
class ASTUnaryExpression;
class ASTCharLiteralExpression;
class ASTExpressionCalloutArg;
class ASTStringCalloutArg;
class ASTCalloutMethodCall;
class ASTSimpleMethodCall;
class ASTMethodCallStatement;
class ASTMethodCallExpression;

class Visitor {
public:
    virtual void visit(ASTProgram *) = 0;
    // virtual void visit(ASTDeclaration *) = 0;
    // virtual void visit(ASTNormalDeclaration *) = 0;
    // virtual void visit(ASTArrayDeclaration *) = 0;
    virtual void visit(ASTAssignmentStatement *) = 0;
    // virtual void visit(ASTExpression *) = 0;
    virtual void visit(ASTBinaryExpression *) = 0;
    // virtual void visit(ASTLocation *) = 0;
    virtual void visit(ASTVarLocation *) = 0;
    virtual void visit(ASTArrayLocation *) = 0;
    virtual void visit(ASTIntegerLiteralExpression *) = 0;
    virtual void visit(ASTBooleanLiteralExpression *) = 0;
    virtual void visit(ASTCharLiteralExpression *) = 0;
    virtual void visit(ASTMethodDeclaration *) = 0;
    virtual void visit(ASTFieldDeclaration *) = 0;
    virtual void visit(ASTNormalIdentifier *) = 0;
    virtual void visit(ASTArrayIdentifier *) = 0;
    virtual void visit(ASTVarDeclaration *) = 0;
    virtual void visit(ASTParam *) = 0;
    virtual void visit(ASTBlockStatement * node) = 0;
    virtual void visit(ASTBreakStatement * node) = 0;
    virtual void visit(ASTContinueStatement * node) = 0;
    virtual void visit(ASTIfStatement * node) = 0;
    virtual void visit(ASTForStatement * node) = 0;
    virtual void visit(ASTReturnStatement * node) = 0;
    virtual void visit(ASTUnaryExpression * node) = 0;
    virtual void visit(ASTExpressionCalloutArg * node) = 0;
    virtual void visit(ASTStringCalloutArg * node) = 0;
    virtual void visit(ASTCalloutMethodCall * node) = 0;
    virtual void visit(ASTSimpleMethodCall * node) = 0;
    virtual void visit(ASTMethodCallStatement * node) = 0;
    virtual void visit(ASTMethodCallExpression * node) = 0;

};
