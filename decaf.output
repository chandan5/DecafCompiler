Terminals which are not used

   ELSE


State 11 conflicts: 2 shift/reduce
State 90 conflicts: 13 shift/reduce
State 123 conflicts: 13 shift/reduce


Grammar

    0 $accept: program $end

    1 program: CLASS IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS OPEN_CURLYBRACE field_decls method_decls CLOSE_CURLYBRACE

    2 field_decls: field_decl
    3            | field_decl field_decls

    4 field_decl: type IDENTIFIER SEMICOLON
    5           | type IDENTIFIER OPEN_SQUAREBRACKET INT_VALUE CLOSE_SQUAREBRACKET SEMICOLON

    6 method_decls: method_decl
    7             | method_decl method_decls

    8 method_decl: method_type IDENTIFIER OPEN_PARANTHESIS params CLOSE_PARANTHESIS block

    9 method_type: type
   10            | VOID

   11 params: param
   12       | params COMMA param

   13 param: type IDENTIFIER

   14 block: OPEN_CURLYBRACE var_decls statements CLOSE_CURLYBRACE

   15 var_decls: var_decl
   16          | var_decl var_decls

   17 var_decl: type identifiers SEMICOLON

   18 identifiers: IDENTIFIER
   19            | identifiers COMMA IDENTIFIER

   20 statements: statement
   21           | statement statements

   22 statement: location assign_op expr SEMICOLON
   23          | method_call SEMICOLON
   24          | IF OPEN_PARANTHESIS expr CLOSE_PARANTHESIS block
   25          | FOR IDENTIFIER EQUAL expr COMMA expr block
   26          | RETURN expr SEMICOLON
   27          | RETURN SEMICOLON
   28          | BREAK SEMICOLON
   29          | CONTINUE SEMICOLON
   30          | block

   31 method_call: method_name OPEN_PARANTHESIS exprs CLOSE_PARANTHESIS
   32            | CALLOUT OPEN_PARANTHESIS STRING_VALUE callout_args CLOSE_PARANTHESIS

   33 exprs: expr
   34      | exprs COMMA expr

   35 method_name: IDENTIFIER

   36 location: IDENTIFIER
   37         | IDENTIFIER OPEN_SQUAREBRACKET expr CLOSE_SQUAREBRACKET

   38 expr: location
   39     | method_call
   40     | literal
   41     | expr bin_op expr
   42     | MINUS expr
   43     | NOT expr
   44     | OPEN_PARANTHESIS expr CLOSE_PARANTHESIS

   45 callout_args: callout_arg
   46             | callout_args COMMA callout_arg

   47 callout_arg: expr
   48            | STRING_VALUE

   49 bin_op: arith_op
   50       | rel_op
   51       | eq_op
   52       | cond_op

   53 arith_op: PLUS
   54         | MINUS
   55         | MULTIPLY
   56         | DIVIDE
   57         | MODULO

   58 rel_op: LESSTHAN
   59       | LESSEQUAL
   60       | GREATERTHAN
   61       | GREATEREQUAL

   62 eq_op: EQUALEQUAL
   63      | NOTEQUAL

   64 cond_op: AND
   65        | OR

   66 assign_op: EQUAL
   67          | PLUSEQUAL
   68          | MINUSEQUAL

   69 literal: INT_VALUE
   70        | bool_value
   71        | CHAR_VALUE

   72 bool_value: TRUE
   73           | FALSE

   74 type: INT
   75     | BOOLEAN


Terminals, with rules where they appear

$end (0) 0
error (256)
SEMICOLON (258) 4 5 17 22 23 26 27 28 29
COMMA (259) 12 19 25 34 46
OPEN_PARANTHESIS (260) 1 8 24 31 32 44
CLOSE_PARANTHESIS (261) 1 8 24 31 32 44
OPEN_SQUAREBRACKET (262) 5 37
CLOSE_SQUAREBRACKET (263) 5 37
OPEN_CURLYBRACE (264) 1 14
CLOSE_CURLYBRACE (265) 1 14
CLASS (266) 1
IF (267) 24
ELSE (268)
FOR (269) 25
CONTINUE (270) 29
BREAK (271) 28
CALLOUT (272) 32
RETURN (273) 26 27
VOID (274) 10
FALSE (275) 73
INT (276) 74
BOOLEAN (277) 75
TRUE (278) 72
NOT (279) 43
AND (280) 64
OR (281) 65
EQUALEQUAL (282) 62
NOTEQUAL (283) 63
LESSEQUAL (284) 59
LESSTHAN (285) 58
GREATEREQUAL (286) 61
GREATERTHAN (287) 60
PLUS (288) 53
MINUS (289) 42 54
MULTIPLY (290) 55
DIVIDE (291) 56
MODULO (292) 57
IDENTIFIER (293) 1 4 5 8 13 18 19 25 35 36 37
STRING_VALUE (294) 32 48
CHAR_VALUE (295) 71
INT_VALUE (296) 5 69
EQUAL (297) 25 66
PLUSEQUAL (298) 67
MINUSEQUAL (299) 68


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
program (46)
    on left: 1, on right: 0
field_decls (47)
    on left: 2 3, on right: 1 3
field_decl (48)
    on left: 4 5, on right: 2 3
method_decls (49)
    on left: 6 7, on right: 1 7
method_decl (50)
    on left: 8, on right: 6 7
method_type (51)
    on left: 9 10, on right: 8
params (52)
    on left: 11 12, on right: 8 12
param (53)
    on left: 13, on right: 11 12
block (54)
    on left: 14, on right: 8 24 25 30
var_decls (55)
    on left: 15 16, on right: 14 16
var_decl (56)
    on left: 17, on right: 15 16
identifiers (57)
    on left: 18 19, on right: 17 19
statements (58)
    on left: 20 21, on right: 14 21
statement (59)
    on left: 22 23 24 25 26 27 28 29 30, on right: 20 21
method_call (60)
    on left: 31 32, on right: 23 39
exprs (61)
    on left: 33 34, on right: 31 34
method_name (62)
    on left: 35, on right: 31
location (63)
    on left: 36 37, on right: 22 38
expr (64)
    on left: 38 39 40 41 42 43 44, on right: 22 24 25 26 33 34 37 41
    42 43 44 47
callout_args (65)
    on left: 45 46, on right: 32 46
callout_arg (66)
    on left: 47 48, on right: 45 46
bin_op (67)
    on left: 49 50 51 52, on right: 41
arith_op (68)
    on left: 53 54 55 56 57, on right: 49
rel_op (69)
    on left: 58 59 60 61, on right: 50
eq_op (70)
    on left: 62 63, on right: 51
cond_op (71)
    on left: 64 65, on right: 52
assign_op (72)
    on left: 66 67 68, on right: 22
literal (73)
    on left: 69 70 71, on right: 40
bool_value (74)
    on left: 72 73, on right: 70
type (75)
    on left: 74 75, on right: 4 5 9 13 17


state 0

    0 $accept: . program $end

    CLASS  shift, and go to state 1

    program  go to state 2


state 1

    1 program: CLASS . IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS OPEN_CURLYBRACE field_decls method_decls CLOSE_CURLYBRACE

    IDENTIFIER  shift, and go to state 3


state 2

    0 $accept: program . $end

    $end  shift, and go to state 4


state 3

    1 program: CLASS IDENTIFIER . OPEN_PARANTHESIS CLOSE_PARANTHESIS OPEN_CURLYBRACE field_decls method_decls CLOSE_CURLYBRACE

    OPEN_PARANTHESIS  shift, and go to state 5


state 4

    0 $accept: program $end .

    $default  accept


state 5

    1 program: CLASS IDENTIFIER OPEN_PARANTHESIS . CLOSE_PARANTHESIS OPEN_CURLYBRACE field_decls method_decls CLOSE_CURLYBRACE

    CLOSE_PARANTHESIS  shift, and go to state 6


state 6

    1 program: CLASS IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS . OPEN_CURLYBRACE field_decls method_decls CLOSE_CURLYBRACE

    OPEN_CURLYBRACE  shift, and go to state 7


state 7

    1 program: CLASS IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS OPEN_CURLYBRACE . field_decls method_decls CLOSE_CURLYBRACE

    INT      shift, and go to state 8
    BOOLEAN  shift, and go to state 9

    field_decls  go to state 10
    field_decl   go to state 11
    type         go to state 12


state 8

   74 type: INT .

    $default  reduce using rule 74 (type)


state 9

   75 type: BOOLEAN .

    $default  reduce using rule 75 (type)


state 10

    1 program: CLASS IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS OPEN_CURLYBRACE field_decls . method_decls CLOSE_CURLYBRACE

    VOID     shift, and go to state 13
    INT      shift, and go to state 8
    BOOLEAN  shift, and go to state 9

    method_decls  go to state 14
    method_decl   go to state 15
    method_type   go to state 16
    type          go to state 17


state 11

    2 field_decls: field_decl .
    3            | field_decl . field_decls

    INT      shift, and go to state 8
    BOOLEAN  shift, and go to state 9

    INT       [reduce using rule 2 (field_decls)]
    BOOLEAN   [reduce using rule 2 (field_decls)]
    $default  reduce using rule 2 (field_decls)

    field_decls  go to state 18
    field_decl   go to state 11
    type         go to state 12


state 12

    4 field_decl: type . IDENTIFIER SEMICOLON
    5           | type . IDENTIFIER OPEN_SQUAREBRACKET INT_VALUE CLOSE_SQUAREBRACKET SEMICOLON

    IDENTIFIER  shift, and go to state 19


state 13

   10 method_type: VOID .

    $default  reduce using rule 10 (method_type)


state 14

    1 program: CLASS IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS OPEN_CURLYBRACE field_decls method_decls . CLOSE_CURLYBRACE

    CLOSE_CURLYBRACE  shift, and go to state 20


state 15

    6 method_decls: method_decl .
    7             | method_decl . method_decls

    VOID     shift, and go to state 13
    INT      shift, and go to state 8
    BOOLEAN  shift, and go to state 9

    $default  reduce using rule 6 (method_decls)

    method_decls  go to state 21
    method_decl   go to state 15
    method_type   go to state 16
    type          go to state 17


state 16

    8 method_decl: method_type . IDENTIFIER OPEN_PARANTHESIS params CLOSE_PARANTHESIS block

    IDENTIFIER  shift, and go to state 22


state 17

    9 method_type: type .

    $default  reduce using rule 9 (method_type)


state 18

    3 field_decls: field_decl field_decls .

    $default  reduce using rule 3 (field_decls)


state 19

    4 field_decl: type IDENTIFIER . SEMICOLON
    5           | type IDENTIFIER . OPEN_SQUAREBRACKET INT_VALUE CLOSE_SQUAREBRACKET SEMICOLON

    SEMICOLON           shift, and go to state 23
    OPEN_SQUAREBRACKET  shift, and go to state 24


state 20

    1 program: CLASS IDENTIFIER OPEN_PARANTHESIS CLOSE_PARANTHESIS OPEN_CURLYBRACE field_decls method_decls CLOSE_CURLYBRACE .

    $default  reduce using rule 1 (program)


state 21

    7 method_decls: method_decl method_decls .

    $default  reduce using rule 7 (method_decls)


state 22

    8 method_decl: method_type IDENTIFIER . OPEN_PARANTHESIS params CLOSE_PARANTHESIS block

    OPEN_PARANTHESIS  shift, and go to state 25


state 23

    4 field_decl: type IDENTIFIER SEMICOLON .

    $default  reduce using rule 4 (field_decl)


state 24

    5 field_decl: type IDENTIFIER OPEN_SQUAREBRACKET . INT_VALUE CLOSE_SQUAREBRACKET SEMICOLON

    INT_VALUE  shift, and go to state 26


state 25

    8 method_decl: method_type IDENTIFIER OPEN_PARANTHESIS . params CLOSE_PARANTHESIS block

    INT      shift, and go to state 8
    BOOLEAN  shift, and go to state 9

    params  go to state 27
    param   go to state 28
    type    go to state 29


state 26

    5 field_decl: type IDENTIFIER OPEN_SQUAREBRACKET INT_VALUE . CLOSE_SQUAREBRACKET SEMICOLON

    CLOSE_SQUAREBRACKET  shift, and go to state 30


state 27

    8 method_decl: method_type IDENTIFIER OPEN_PARANTHESIS params . CLOSE_PARANTHESIS block
   12 params: params . COMMA param

    COMMA              shift, and go to state 31
    CLOSE_PARANTHESIS  shift, and go to state 32


state 28

   11 params: param .

    $default  reduce using rule 11 (params)


state 29

   13 param: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 33


state 30

    5 field_decl: type IDENTIFIER OPEN_SQUAREBRACKET INT_VALUE CLOSE_SQUAREBRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 34


state 31

   12 params: params COMMA . param

    INT      shift, and go to state 8
    BOOLEAN  shift, and go to state 9

    param  go to state 35
    type   go to state 29


state 32

    8 method_decl: method_type IDENTIFIER OPEN_PARANTHESIS params CLOSE_PARANTHESIS . block

    OPEN_CURLYBRACE  shift, and go to state 36

    block  go to state 37


state 33

   13 param: type IDENTIFIER .

    $default  reduce using rule 13 (param)


state 34

    5 field_decl: type IDENTIFIER OPEN_SQUAREBRACKET INT_VALUE CLOSE_SQUAREBRACKET SEMICOLON .

    $default  reduce using rule 5 (field_decl)


state 35

   12 params: params COMMA param .

    $default  reduce using rule 12 (params)


state 36

   14 block: OPEN_CURLYBRACE . var_decls statements CLOSE_CURLYBRACE

    INT      shift, and go to state 8
    BOOLEAN  shift, and go to state 9

    var_decls  go to state 38
    var_decl   go to state 39
    type       go to state 40


state 37

    8 method_decl: method_type IDENTIFIER OPEN_PARANTHESIS params CLOSE_PARANTHESIS block .

    $default  reduce using rule 8 (method_decl)


state 38

   14 block: OPEN_CURLYBRACE var_decls . statements CLOSE_CURLYBRACE

    OPEN_CURLYBRACE  shift, and go to state 36
    IF               shift, and go to state 41
    FOR              shift, and go to state 42
    CONTINUE         shift, and go to state 43
    BREAK            shift, and go to state 44
    CALLOUT          shift, and go to state 45
    RETURN           shift, and go to state 46
    IDENTIFIER       shift, and go to state 47

    block        go to state 48
    statements   go to state 49
    statement    go to state 50
    method_call  go to state 51
    method_name  go to state 52
    location     go to state 53


state 39

   15 var_decls: var_decl .
   16          | var_decl . var_decls

    INT      shift, and go to state 8
    BOOLEAN  shift, and go to state 9

    $default  reduce using rule 15 (var_decls)

    var_decls  go to state 54
    var_decl   go to state 39
    type       go to state 40


state 40

   17 var_decl: type . identifiers SEMICOLON

    IDENTIFIER  shift, and go to state 55

    identifiers  go to state 56


state 41

   24 statement: IF . OPEN_PARANTHESIS expr CLOSE_PARANTHESIS block

    OPEN_PARANTHESIS  shift, and go to state 57


state 42

   25 statement: FOR . IDENTIFIER EQUAL expr COMMA expr block

    IDENTIFIER  shift, and go to state 58


state 43

   29 statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 59


state 44

   28 statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 60


state 45

   32 method_call: CALLOUT . OPEN_PARANTHESIS STRING_VALUE callout_args CLOSE_PARANTHESIS

    OPEN_PARANTHESIS  shift, and go to state 61


state 46

   26 statement: RETURN . expr SEMICOLON
   27          | RETURN . SEMICOLON

    SEMICOLON         shift, and go to state 62
    OPEN_PARANTHESIS  shift, and go to state 63
    CALLOUT           shift, and go to state 45
    FALSE             shift, and go to state 64
    TRUE              shift, and go to state 65
    NOT               shift, and go to state 66
    MINUS             shift, and go to state 67
    IDENTIFIER        shift, and go to state 47
    CHAR_VALUE        shift, and go to state 68
    INT_VALUE         shift, and go to state 69

    method_call  go to state 70
    method_name  go to state 52
    location     go to state 71
    expr         go to state 72
    literal      go to state 73
    bool_value   go to state 74


state 47

   35 method_name: IDENTIFIER .
   36 location: IDENTIFIER .
   37         | IDENTIFIER . OPEN_SQUAREBRACKET expr CLOSE_SQUAREBRACKET

    OPEN_SQUAREBRACKET  shift, and go to state 75

    OPEN_PARANTHESIS  reduce using rule 35 (method_name)
    $default          reduce using rule 36 (location)


state 48

   30 statement: block .

    $default  reduce using rule 30 (statement)


state 49

   14 block: OPEN_CURLYBRACE var_decls statements . CLOSE_CURLYBRACE

    CLOSE_CURLYBRACE  shift, and go to state 76


state 50

   20 statements: statement .
   21           | statement . statements

    OPEN_CURLYBRACE  shift, and go to state 36
    IF               shift, and go to state 41
    FOR              shift, and go to state 42
    CONTINUE         shift, and go to state 43
    BREAK            shift, and go to state 44
    CALLOUT          shift, and go to state 45
    RETURN           shift, and go to state 46
    IDENTIFIER       shift, and go to state 47

    $default  reduce using rule 20 (statements)

    block        go to state 48
    statements   go to state 77
    statement    go to state 50
    method_call  go to state 51
    method_name  go to state 52
    location     go to state 53


state 51

   23 statement: method_call . SEMICOLON

    SEMICOLON  shift, and go to state 78


state 52

   31 method_call: method_name . OPEN_PARANTHESIS exprs CLOSE_PARANTHESIS

    OPEN_PARANTHESIS  shift, and go to state 79


state 53

   22 statement: location . assign_op expr SEMICOLON

    EQUAL       shift, and go to state 80
    PLUSEQUAL   shift, and go to state 81
    MINUSEQUAL  shift, and go to state 82

    assign_op  go to state 83


state 54

   16 var_decls: var_decl var_decls .

    $default  reduce using rule 16 (var_decls)


state 55

   18 identifiers: IDENTIFIER .

    $default  reduce using rule 18 (identifiers)


state 56

   17 var_decl: type identifiers . SEMICOLON
   19 identifiers: identifiers . COMMA IDENTIFIER

    SEMICOLON  shift, and go to state 84
    COMMA      shift, and go to state 85


state 57

   24 statement: IF OPEN_PARANTHESIS . expr CLOSE_PARANTHESIS block

    OPEN_PARANTHESIS  shift, and go to state 63
    CALLOUT           shift, and go to state 45
    FALSE             shift, and go to state 64
    TRUE              shift, and go to state 65
    NOT               shift, and go to state 66
    MINUS             shift, and go to state 67
    IDENTIFIER        shift, and go to state 47
    CHAR_VALUE        shift, and go to state 68
    INT_VALUE         shift, and go to state 69

    method_call  go to state 70
    method_name  go to state 52
    location     go to state 71
    expr         go to state 86
    literal      go to state 73
    bool_value   go to state 74


state 58

   25 statement: FOR IDENTIFIER . EQUAL expr COMMA expr block

    EQUAL  shift, and go to state 87


state 59

   29 statement: CONTINUE SEMICOLON .

    $default  reduce using rule 29 (statement)


state 60

   28 statement: BREAK SEMICOLON .

    $default  reduce using rule 28 (statement)


state 61

   32 method_call: CALLOUT OPEN_PARANTHESIS . STRING_VALUE callout_args CLOSE_PARANTHESIS

    STRING_VALUE  shift, and go to state 88


state 62

   27 statement: RETURN SEMICOLON .

    $default  reduce using rule 27 (statement)


state 63

   44 expr: OPEN_PARANTHESIS . expr CLOSE_PARANTHESIS

    OPEN_PARANTHESIS  shift, and go to state 63
    CALLOUT           shift, and go to state 45
    FALSE             shift, and go to state 64
    TRUE              shift, and go to state 65
    NOT               shift, and go to state 66
    MINUS             shift, and go to state 67
    IDENTIFIER        shift, and go to state 47
    CHAR_VALUE        shift, and go to state 68
    INT_VALUE         shift, and go to state 69

    method_call  go to state 70
    method_name  go to state 52
    location     go to state 71
    expr         go to state 89
    literal      go to state 73
    bool_value   go to state 74


state 64

   73 bool_value: FALSE .

    $default  reduce using rule 73 (bool_value)


state 65

   72 bool_value: TRUE .

    $default  reduce using rule 72 (bool_value)


state 66

   43 expr: NOT . expr

    OPEN_PARANTHESIS  shift, and go to state 63
    CALLOUT           shift, and go to state 45
    FALSE             shift, and go to state 64
    TRUE              shift, and go to state 65
    NOT               shift, and go to state 66
    MINUS             shift, and go to state 67
    IDENTIFIER        shift, and go to state 47
    CHAR_VALUE        shift, and go to state 68
    INT_VALUE         shift, and go to state 69

    method_call  go to state 70
    method_name  go to state 52
    location     go to state 71
    expr         go to state 90
    literal      go to state 73
    bool_value   go to state 74


state 67

   42 expr: MINUS . expr

    OPEN_PARANTHESIS  shift, and go to state 63
    CALLOUT           shift, and go to state 45
    FALSE             shift, and go to state 64
    TRUE              shift, and go to state 65
    NOT               shift, and go to state 66
    MINUS             shift, and go to state 67
    IDENTIFIER        shift, and go to state 47
    CHAR_VALUE        shift, and go to state 68
    INT_VALUE         shift, and go to state 69

    method_call  go to state 70
    method_name  go to state 52
    location     go to state 71
    expr         go to state 91
    literal      go to state 73
    bool_value   go to state 74


state 68

   71 literal: CHAR_VALUE .

    $default  reduce using rule 71 (literal)


state 69

   69 literal: INT_VALUE .

    $default  reduce using rule 69 (literal)


state 70

   39 expr: method_call .

    $default  reduce using rule 39 (expr)


state 71

   38 expr: location .

    $default  reduce using rule 38 (expr)


state 72

   26 statement: RETURN expr . SEMICOLON
   41 expr: expr . bin_op expr

    SEMICOLON     shift, and go to state 92
    AND           shift, and go to state 93
    OR            shift, and go to state 94
    EQUALEQUAL    shift, and go to state 95
    NOTEQUAL      shift, and go to state 96
    LESSEQUAL     shift, and go to state 97
    LESSTHAN      shift, and go to state 98
    GREATEREQUAL  shift, and go to state 99
    GREATERTHAN   shift, and go to state 100
    PLUS          shift, and go to state 101
    MINUS         shift, and go to state 102
    MULTIPLY      shift, and go to state 103
    DIVIDE        shift, and go to state 104
    MODULO        shift, and go to state 105

    bin_op    go to state 106
    arith_op  go to state 107
    rel_op    go to state 108
    eq_op     go to state 109
    cond_op   go to state 110


state 73

   40 expr: literal .

    $default  reduce using rule 40 (expr)


state 74

   70 literal: bool_value .

    $default  reduce using rule 70 (literal)


state 75

   37 location: IDENTIFIER OPEN_SQUAREBRACKET . expr CLOSE_SQUAREBRACKET

    OPEN_PARANTHESIS  shift, and go to state 63
    CALLOUT           shift, and go to state 45
    FALSE             shift, and go to state 64
    TRUE              shift, and go to state 65
    NOT               shift, and go to state 66
    MINUS             shift, and go to state 67
    IDENTIFIER        shift, and go to state 47
    CHAR_VALUE        shift, and go to state 68
    INT_VALUE         shift, and go to state 69

    method_call  go to state 70
    method_name  go to state 52
    location     go to state 71
    expr         go to state 111
    literal      go to state 73
    bool_value   go to state 74


state 76

   14 block: OPEN_CURLYBRACE var_decls statements CLOSE_CURLYBRACE .

    $default  reduce using rule 14 (block)


state 77

   21 statements: statement statements .

    $default  reduce using rule 21 (statements)


state 78

   23 statement: method_call SEMICOLON .

    $default  reduce using rule 23 (statement)


state 79

   31 method_call: method_name OPEN_PARANTHESIS . exprs CLOSE_PARANTHESIS

    OPEN_PARANTHESIS  shift, and go to state 63
    CALLOUT           shift, and go to state 45
    FALSE             shift, and go to state 64
    TRUE              shift, and go to state 65
    NOT               shift, and go to state 66
    MINUS             shift, and go to state 67
    IDENTIFIER        shift, and go to state 47
    CHAR_VALUE        shift, and go to state 68
    INT_VALUE         shift, and go to state 69

    method_call  go to state 70
    exprs        go to state 112
    method_name  go to state 52
    location     go to state 71
    expr         go to state 113
    literal      go to state 73
    bool_value   go to state 74


state 80

   66 assign_op: EQUAL .

    $default  reduce using rule 66 (assign_op)


state 81

   67 assign_op: PLUSEQUAL .

    $default  reduce using rule 67 (assign_op)


state 82

   68 assign_op: MINUSEQUAL .

    $default  reduce using rule 68 (assign_op)


state 83

   22 statement: location assign_op . expr SEMICOLON

    OPEN_PARANTHESIS  shift, and go to state 63
    CALLOUT           shift, and go to state 45
    FALSE             shift, and go to state 64
    TRUE              shift, and go to state 65
    NOT               shift, and go to state 66
    MINUS             shift, and go to state 67
    IDENTIFIER        shift, and go to state 47
    CHAR_VALUE        shift, and go to state 68
    INT_VALUE         shift, and go to state 69

    method_call  go to state 70
    method_name  go to state 52
    location     go to state 71
    expr         go to state 114
    literal      go to state 73
    bool_value   go to state 74


state 84

   17 var_decl: type identifiers SEMICOLON .

    $default  reduce using rule 17 (var_decl)


state 85

   19 identifiers: identifiers COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 115


state 86

   24 statement: IF OPEN_PARANTHESIS expr . CLOSE_PARANTHESIS block
   41 expr: expr . bin_op expr

    CLOSE_PARANTHESIS  shift, and go to state 116
    AND                shift, and go to state 93
    OR                 shift, and go to state 94
    EQUALEQUAL         shift, and go to state 95
    NOTEQUAL           shift, and go to state 96
    LESSEQUAL          shift, and go to state 97
    LESSTHAN           shift, and go to state 98
    GREATEREQUAL       shift, and go to state 99
    GREATERTHAN        shift, and go to state 100
    PLUS               shift, and go to state 101
    MINUS              shift, and go to state 102
    MULTIPLY           shift, and go to state 103
    DIVIDE             shift, and go to state 104
    MODULO             shift, and go to state 105

    bin_op    go to state 106
    arith_op  go to state 107
    rel_op    go to state 108
    eq_op     go to state 109
    cond_op   go to state 110


state 87

   25 statement: FOR IDENTIFIER EQUAL . expr COMMA expr block

    OPEN_PARANTHESIS  shift, and go to state 63
    CALLOUT           shift, and go to state 45
    FALSE             shift, and go to state 64
    TRUE              shift, and go to state 65
    NOT               shift, and go to state 66
    MINUS             shift, and go to state 67
    IDENTIFIER        shift, and go to state 47
    CHAR_VALUE        shift, and go to state 68
    INT_VALUE         shift, and go to state 69

    method_call  go to state 70
    method_name  go to state 52
    location     go to state 71
    expr         go to state 117
    literal      go to state 73
    bool_value   go to state 74


state 88

   32 method_call: CALLOUT OPEN_PARANTHESIS STRING_VALUE . callout_args CLOSE_PARANTHESIS

    OPEN_PARANTHESIS  shift, and go to state 63
    CALLOUT           shift, and go to state 45
    FALSE             shift, and go to state 64
    TRUE              shift, and go to state 65
    NOT               shift, and go to state 66
    MINUS             shift, and go to state 67
    IDENTIFIER        shift, and go to state 47
    STRING_VALUE      shift, and go to state 118
    CHAR_VALUE        shift, and go to state 68
    INT_VALUE         shift, and go to state 69

    method_call   go to state 70
    method_name   go to state 52
    location      go to state 71
    expr          go to state 119
    callout_args  go to state 120
    callout_arg   go to state 121
    literal       go to state 73
    bool_value    go to state 74


state 89

   41 expr: expr . bin_op expr
   44     | OPEN_PARANTHESIS expr . CLOSE_PARANTHESIS

    CLOSE_PARANTHESIS  shift, and go to state 122
    AND                shift, and go to state 93
    OR                 shift, and go to state 94
    EQUALEQUAL         shift, and go to state 95
    NOTEQUAL           shift, and go to state 96
    LESSEQUAL          shift, and go to state 97
    LESSTHAN           shift, and go to state 98
    GREATEREQUAL       shift, and go to state 99
    GREATERTHAN        shift, and go to state 100
    PLUS               shift, and go to state 101
    MINUS              shift, and go to state 102
    MULTIPLY           shift, and go to state 103
    DIVIDE             shift, and go to state 104
    MODULO             shift, and go to state 105

    bin_op    go to state 106
    arith_op  go to state 107
    rel_op    go to state 108
    eq_op     go to state 109
    cond_op   go to state 110


state 90

   41 expr: expr . bin_op expr
   43     | NOT expr .

    AND           shift, and go to state 93
    OR            shift, and go to state 94
    EQUALEQUAL    shift, and go to state 95
    NOTEQUAL      shift, and go to state 96
    LESSEQUAL     shift, and go to state 97
    LESSTHAN      shift, and go to state 98
    GREATEREQUAL  shift, and go to state 99
    GREATERTHAN   shift, and go to state 100
    PLUS          shift, and go to state 101
    MINUS         shift, and go to state 102
    MULTIPLY      shift, and go to state 103
    DIVIDE        shift, and go to state 104
    MODULO        shift, and go to state 105

    AND           [reduce using rule 43 (expr)]
    OR            [reduce using rule 43 (expr)]
    EQUALEQUAL    [reduce using rule 43 (expr)]
    NOTEQUAL      [reduce using rule 43 (expr)]
    LESSEQUAL     [reduce using rule 43 (expr)]
    LESSTHAN      [reduce using rule 43 (expr)]
    GREATEREQUAL  [reduce using rule 43 (expr)]
    GREATERTHAN   [reduce using rule 43 (expr)]
    PLUS          [reduce using rule 43 (expr)]
    MINUS         [reduce using rule 43 (expr)]
    MULTIPLY      [reduce using rule 43 (expr)]
    DIVIDE        [reduce using rule 43 (expr)]
    MODULO        [reduce using rule 43 (expr)]
    $default      reduce using rule 43 (expr)

    bin_op    go to state 106
    arith_op  go to state 107
    rel_op    go to state 108
    eq_op     go to state 109
    cond_op   go to state 110


state 91

   41 expr: expr . bin_op expr
   42     | MINUS expr .

    MULTIPLY  shift, and go to state 103
    DIVIDE    shift, and go to state 104
    MODULO    shift, and go to state 105

    $default  reduce using rule 42 (expr)

    bin_op    go to state 106
    arith_op  go to state 107
    rel_op    go to state 108
    eq_op     go to state 109
    cond_op   go to state 110


state 92

   26 statement: RETURN expr SEMICOLON .

    $default  reduce using rule 26 (statement)


state 93

   64 cond_op: AND .

    $default  reduce using rule 64 (cond_op)


state 94

   65 cond_op: OR .

    $default  reduce using rule 65 (cond_op)


state 95

   62 eq_op: EQUALEQUAL .

    $default  reduce using rule 62 (eq_op)


state 96

   63 eq_op: NOTEQUAL .

    $default  reduce using rule 63 (eq_op)


state 97

   59 rel_op: LESSEQUAL .

    $default  reduce using rule 59 (rel_op)


state 98

   58 rel_op: LESSTHAN .

    $default  reduce using rule 58 (rel_op)


state 99

   61 rel_op: GREATEREQUAL .

    $default  reduce using rule 61 (rel_op)


state 100

   60 rel_op: GREATERTHAN .

    $default  reduce using rule 60 (rel_op)


state 101

   53 arith_op: PLUS .

    $default  reduce using rule 53 (arith_op)


state 102

   54 arith_op: MINUS .

    $default  reduce using rule 54 (arith_op)


state 103

   55 arith_op: MULTIPLY .

    $default  reduce using rule 55 (arith_op)


state 104

   56 arith_op: DIVIDE .

    $default  reduce using rule 56 (arith_op)


state 105

   57 arith_op: MODULO .

    $default  reduce using rule 57 (arith_op)


state 106

   41 expr: expr bin_op . expr

    OPEN_PARANTHESIS  shift, and go to state 63
    CALLOUT           shift, and go to state 45
    FALSE             shift, and go to state 64
    TRUE              shift, and go to state 65
    NOT               shift, and go to state 66
    MINUS             shift, and go to state 67
    IDENTIFIER        shift, and go to state 47
    CHAR_VALUE        shift, and go to state 68
    INT_VALUE         shift, and go to state 69

    method_call  go to state 70
    method_name  go to state 52
    location     go to state 71
    expr         go to state 123
    literal      go to state 73
    bool_value   go to state 74


state 107

   49 bin_op: arith_op .

    $default  reduce using rule 49 (bin_op)


state 108

   50 bin_op: rel_op .

    $default  reduce using rule 50 (bin_op)


state 109

   51 bin_op: eq_op .

    $default  reduce using rule 51 (bin_op)


state 110

   52 bin_op: cond_op .

    $default  reduce using rule 52 (bin_op)


state 111

   37 location: IDENTIFIER OPEN_SQUAREBRACKET expr . CLOSE_SQUAREBRACKET
   41 expr: expr . bin_op expr

    CLOSE_SQUAREBRACKET  shift, and go to state 124
    AND                  shift, and go to state 93
    OR                   shift, and go to state 94
    EQUALEQUAL           shift, and go to state 95
    NOTEQUAL             shift, and go to state 96
    LESSEQUAL            shift, and go to state 97
    LESSTHAN             shift, and go to state 98
    GREATEREQUAL         shift, and go to state 99
    GREATERTHAN          shift, and go to state 100
    PLUS                 shift, and go to state 101
    MINUS                shift, and go to state 102
    MULTIPLY             shift, and go to state 103
    DIVIDE               shift, and go to state 104
    MODULO               shift, and go to state 105

    bin_op    go to state 106
    arith_op  go to state 107
    rel_op    go to state 108
    eq_op     go to state 109
    cond_op   go to state 110


state 112

   31 method_call: method_name OPEN_PARANTHESIS exprs . CLOSE_PARANTHESIS
   34 exprs: exprs . COMMA expr

    COMMA              shift, and go to state 125
    CLOSE_PARANTHESIS  shift, and go to state 126


state 113

   33 exprs: expr .
   41 expr: expr . bin_op expr

    AND           shift, and go to state 93
    OR            shift, and go to state 94
    EQUALEQUAL    shift, and go to state 95
    NOTEQUAL      shift, and go to state 96
    LESSEQUAL     shift, and go to state 97
    LESSTHAN      shift, and go to state 98
    GREATEREQUAL  shift, and go to state 99
    GREATERTHAN   shift, and go to state 100
    PLUS          shift, and go to state 101
    MINUS         shift, and go to state 102
    MULTIPLY      shift, and go to state 103
    DIVIDE        shift, and go to state 104
    MODULO        shift, and go to state 105

    $default  reduce using rule 33 (exprs)

    bin_op    go to state 106
    arith_op  go to state 107
    rel_op    go to state 108
    eq_op     go to state 109
    cond_op   go to state 110


state 114

   22 statement: location assign_op expr . SEMICOLON
   41 expr: expr . bin_op expr

    SEMICOLON     shift, and go to state 127
    AND           shift, and go to state 93
    OR            shift, and go to state 94
    EQUALEQUAL    shift, and go to state 95
    NOTEQUAL      shift, and go to state 96
    LESSEQUAL     shift, and go to state 97
    LESSTHAN      shift, and go to state 98
    GREATEREQUAL  shift, and go to state 99
    GREATERTHAN   shift, and go to state 100
    PLUS          shift, and go to state 101
    MINUS         shift, and go to state 102
    MULTIPLY      shift, and go to state 103
    DIVIDE        shift, and go to state 104
    MODULO        shift, and go to state 105

    bin_op    go to state 106
    arith_op  go to state 107
    rel_op    go to state 108
    eq_op     go to state 109
    cond_op   go to state 110


state 115

   19 identifiers: identifiers COMMA IDENTIFIER .

    $default  reduce using rule 19 (identifiers)


state 116

   24 statement: IF OPEN_PARANTHESIS expr CLOSE_PARANTHESIS . block

    OPEN_CURLYBRACE  shift, and go to state 36

    block  go to state 128


state 117

   25 statement: FOR IDENTIFIER EQUAL expr . COMMA expr block
   41 expr: expr . bin_op expr

    COMMA         shift, and go to state 129
    AND           shift, and go to state 93
    OR            shift, and go to state 94
    EQUALEQUAL    shift, and go to state 95
    NOTEQUAL      shift, and go to state 96
    LESSEQUAL     shift, and go to state 97
    LESSTHAN      shift, and go to state 98
    GREATEREQUAL  shift, and go to state 99
    GREATERTHAN   shift, and go to state 100
    PLUS          shift, and go to state 101
    MINUS         shift, and go to state 102
    MULTIPLY      shift, and go to state 103
    DIVIDE        shift, and go to state 104
    MODULO        shift, and go to state 105

    bin_op    go to state 106
    arith_op  go to state 107
    rel_op    go to state 108
    eq_op     go to state 109
    cond_op   go to state 110


state 118

   48 callout_arg: STRING_VALUE .

    $default  reduce using rule 48 (callout_arg)


state 119

   41 expr: expr . bin_op expr
   47 callout_arg: expr .

    AND           shift, and go to state 93
    OR            shift, and go to state 94
    EQUALEQUAL    shift, and go to state 95
    NOTEQUAL      shift, and go to state 96
    LESSEQUAL     shift, and go to state 97
    LESSTHAN      shift, and go to state 98
    GREATEREQUAL  shift, and go to state 99
    GREATERTHAN   shift, and go to state 100
    PLUS          shift, and go to state 101
    MINUS         shift, and go to state 102
    MULTIPLY      shift, and go to state 103
    DIVIDE        shift, and go to state 104
    MODULO        shift, and go to state 105

    $default  reduce using rule 47 (callout_arg)

    bin_op    go to state 106
    arith_op  go to state 107
    rel_op    go to state 108
    eq_op     go to state 109
    cond_op   go to state 110


state 120

   32 method_call: CALLOUT OPEN_PARANTHESIS STRING_VALUE callout_args . CLOSE_PARANTHESIS
   46 callout_args: callout_args . COMMA callout_arg

    COMMA              shift, and go to state 130
    CLOSE_PARANTHESIS  shift, and go to state 131


state 121

   45 callout_args: callout_arg .

    $default  reduce using rule 45 (callout_args)


state 122

   44 expr: OPEN_PARANTHESIS expr CLOSE_PARANTHESIS .

    $default  reduce using rule 44 (expr)


state 123

   41 expr: expr . bin_op expr
   41     | expr bin_op expr .

    AND           shift, and go to state 93
    OR            shift, and go to state 94
    EQUALEQUAL    shift, and go to state 95
    NOTEQUAL      shift, and go to state 96
    LESSEQUAL     shift, and go to state 97
    LESSTHAN      shift, and go to state 98
    GREATEREQUAL  shift, and go to state 99
    GREATERTHAN   shift, and go to state 100
    PLUS          shift, and go to state 101
    MINUS         shift, and go to state 102
    MULTIPLY      shift, and go to state 103
    DIVIDE        shift, and go to state 104
    MODULO        shift, and go to state 105

    AND           [reduce using rule 41 (expr)]
    OR            [reduce using rule 41 (expr)]
    EQUALEQUAL    [reduce using rule 41 (expr)]
    NOTEQUAL      [reduce using rule 41 (expr)]
    LESSEQUAL     [reduce using rule 41 (expr)]
    LESSTHAN      [reduce using rule 41 (expr)]
    GREATEREQUAL  [reduce using rule 41 (expr)]
    GREATERTHAN   [reduce using rule 41 (expr)]
    PLUS          [reduce using rule 41 (expr)]
    MINUS         [reduce using rule 41 (expr)]
    MULTIPLY      [reduce using rule 41 (expr)]
    DIVIDE        [reduce using rule 41 (expr)]
    MODULO        [reduce using rule 41 (expr)]
    $default      reduce using rule 41 (expr)

    bin_op    go to state 106
    arith_op  go to state 107
    rel_op    go to state 108
    eq_op     go to state 109
    cond_op   go to state 110


state 124

   37 location: IDENTIFIER OPEN_SQUAREBRACKET expr CLOSE_SQUAREBRACKET .

    $default  reduce using rule 37 (location)


state 125

   34 exprs: exprs COMMA . expr

    OPEN_PARANTHESIS  shift, and go to state 63
    CALLOUT           shift, and go to state 45
    FALSE             shift, and go to state 64
    TRUE              shift, and go to state 65
    NOT               shift, and go to state 66
    MINUS             shift, and go to state 67
    IDENTIFIER        shift, and go to state 47
    CHAR_VALUE        shift, and go to state 68
    INT_VALUE         shift, and go to state 69

    method_call  go to state 70
    method_name  go to state 52
    location     go to state 71
    expr         go to state 132
    literal      go to state 73
    bool_value   go to state 74


state 126

   31 method_call: method_name OPEN_PARANTHESIS exprs CLOSE_PARANTHESIS .

    $default  reduce using rule 31 (method_call)


state 127

   22 statement: location assign_op expr SEMICOLON .

    $default  reduce using rule 22 (statement)


state 128

   24 statement: IF OPEN_PARANTHESIS expr CLOSE_PARANTHESIS block .

    $default  reduce using rule 24 (statement)


state 129

   25 statement: FOR IDENTIFIER EQUAL expr COMMA . expr block

    OPEN_PARANTHESIS  shift, and go to state 63
    CALLOUT           shift, and go to state 45
    FALSE             shift, and go to state 64
    TRUE              shift, and go to state 65
    NOT               shift, and go to state 66
    MINUS             shift, and go to state 67
    IDENTIFIER        shift, and go to state 47
    CHAR_VALUE        shift, and go to state 68
    INT_VALUE         shift, and go to state 69

    method_call  go to state 70
    method_name  go to state 52
    location     go to state 71
    expr         go to state 133
    literal      go to state 73
    bool_value   go to state 74


state 130

   46 callout_args: callout_args COMMA . callout_arg

    OPEN_PARANTHESIS  shift, and go to state 63
    CALLOUT           shift, and go to state 45
    FALSE             shift, and go to state 64
    TRUE              shift, and go to state 65
    NOT               shift, and go to state 66
    MINUS             shift, and go to state 67
    IDENTIFIER        shift, and go to state 47
    STRING_VALUE      shift, and go to state 118
    CHAR_VALUE        shift, and go to state 68
    INT_VALUE         shift, and go to state 69

    method_call  go to state 70
    method_name  go to state 52
    location     go to state 71
    expr         go to state 119
    callout_arg  go to state 134
    literal      go to state 73
    bool_value   go to state 74


state 131

   32 method_call: CALLOUT OPEN_PARANTHESIS STRING_VALUE callout_args CLOSE_PARANTHESIS .

    $default  reduce using rule 32 (method_call)


state 132

   34 exprs: exprs COMMA expr .
   41 expr: expr . bin_op expr

    AND           shift, and go to state 93
    OR            shift, and go to state 94
    EQUALEQUAL    shift, and go to state 95
    NOTEQUAL      shift, and go to state 96
    LESSEQUAL     shift, and go to state 97
    LESSTHAN      shift, and go to state 98
    GREATEREQUAL  shift, and go to state 99
    GREATERTHAN   shift, and go to state 100
    PLUS          shift, and go to state 101
    MINUS         shift, and go to state 102
    MULTIPLY      shift, and go to state 103
    DIVIDE        shift, and go to state 104
    MODULO        shift, and go to state 105

    $default  reduce using rule 34 (exprs)

    bin_op    go to state 106
    arith_op  go to state 107
    rel_op    go to state 108
    eq_op     go to state 109
    cond_op   go to state 110


state 133

   25 statement: FOR IDENTIFIER EQUAL expr COMMA expr . block
   41 expr: expr . bin_op expr

    OPEN_CURLYBRACE  shift, and go to state 36
    AND              shift, and go to state 93
    OR               shift, and go to state 94
    EQUALEQUAL       shift, and go to state 95
    NOTEQUAL         shift, and go to state 96
    LESSEQUAL        shift, and go to state 97
    LESSTHAN         shift, and go to state 98
    GREATEREQUAL     shift, and go to state 99
    GREATERTHAN      shift, and go to state 100
    PLUS             shift, and go to state 101
    MINUS            shift, and go to state 102
    MULTIPLY         shift, and go to state 103
    DIVIDE           shift, and go to state 104
    MODULO           shift, and go to state 105

    block     go to state 135
    bin_op    go to state 106
    arith_op  go to state 107
    rel_op    go to state 108
    eq_op     go to state 109
    cond_op   go to state 110


state 134

   46 callout_args: callout_args COMMA callout_arg .

    $default  reduce using rule 46 (callout_args)


state 135

   25 statement: FOR IDENTIFIER EQUAL expr COMMA expr block .

    $default  reduce using rule 25 (statement)
